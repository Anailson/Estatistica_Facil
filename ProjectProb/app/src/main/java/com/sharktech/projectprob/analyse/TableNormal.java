package com.sharktech.projectprob.analyse;

class TableNormal {

    private static final float[] TABLE = {
            0.000000f, 0.003989f, 0.007978f, 0.011967f, 0.015953f, 0.019939f, 0.023922f, 0.027903f, 0.031881f, 0.035856f,
            0.039828f, 0.043795f, 0.047758f, 0.051717f, 0.055670f, 0.059618f, 0.063559f, 0.067495f, 0.071424f, 0.075345f,
            0.079260f, 0.083166f, 0.087064f, 0.090954f, 0.094835f, 0.098706f, 0.102568f, 0.106420f, 0.110261f, 0.114092f,
            0.117911f, 0.121719f, 0.125516f, 0.129300f, 0.133072f, 0.136831f, 0.140576f, 0.144309f, 0.148027f, 0.151732f,
            0.155422f, 0.159097f, 0.162757f, 0.166402f, 0.170031f, 0.173645f, 0.177242f, 0.180822f, 0.184386f, 0.187933f,
            0.191462f, 0.194974f, 0.198468f, 0.201944f, 0.205402f, 0.208840f, 0.212260f, 0.215661f, 0.219043f, 0.222405f,
            0.225747f, 0.229069f, 0.232371f, 0.235653f, 0.238914f, 0.242154f, 0.245373f, 0.248571f, 0.251748f, 0.254903f,
            0.258036f, 0.261148f, 0.264238f, 0.267305f, 0.270350f, 0.273373f, 0.276373f, 0.279350f, 0.282305f, 0.285236f,
            0.288145f, 0.291030f, 0.293892f, 0.296731f, 0.299546f, 0.302338f, 0.305106f, 0.307850f, 0.310570f, 0.313267f,
            0.315940f, 0.318589f, 0.321214f, 0.323814f, 0.326391f, 0.328944f, 0.331472f, 0.333977f, 0.336457f, 0.338913f,
            0.341345f, 0.343752f, 0.346136f, 0.348495f, 0.350830f, 0.353141f, 0.355428f, 0.357690f, 0.359929f, 0.362143f,
            0.364334f, 0.366500f, 0.368643f, 0.370762f, 0.372857f, 0.375928f, 0.376976f, 0.378999f, 0.381000f, 0.382977f,
            0.384930f, 0.386680f, 0.388767f, 0.390651f, 0.392512f, 0.394350f, 0.396165f, 0.397958f, 0.399727f, 0.401475f,
            0.403199f, 0.404902f, 0.406582f, 0.408241f, 0.409877f, 0.411492f, 0.413085f, 0.414656f, 0.416207f, 0.417736f,
            0.419243f, 0.420730f, 0.422196f, 0.423641f, 0.425066f, 0.426471f, 0.427855f, 0.429219f, 0.430563f, 0.431888f,
            0.433193f, 0.434478f, 0.435744f, 0.436992f, 0.438220f, 0.439492f, 0.440620f, 0.441792f, 0.442947f, 0.444083f,
            0.445201f, 0.446301f, 0.447384f, 0.448449f, 0.449497f, 0.450529f, 0.451543f, 0.452540f, 0.453521f, 0.454486f,
            0.455435f, 0.456367f, 0.457284f, 0.458185f, 0.459071f, 0.459941f, 0.460796f, 0.461636f, 0.462462f, 0.463273f,
            0.464070f, 0.464852f, 0.465621f, 0.466375f, 0.467116f, 0.467843f, 0.468557f, 0.469258f, 0.469946f, 0.470621f,
            0.471284f, 0.471933f, 0.472571f, 0.473197f, 0.473810f, 0.474412f, 0.475002f, 0.475581f, 0.476148f, 0.476705f,
            0.477250f, 0.477784f, 0.478380f, 0.478822f, 0.479325f, 0.479818f, 0.480301f, 0.480774f, 0.481237f, 0.481691f,
            0.482136f, 0.482571f, 0.482997f, 0.483414f, 0.483823f, 0.484222f, 0.484614f, 0.484997f, 0.485371f, 0.485738f,
            0.486097f, 0.486447f, 0.486791f, 0.487126f, 0.487455f, 0.487776f, 0.488089f, 0.488396f, 0.488696f, 0.488989f,
            0.489276f, 0.489556f, 0.489830f, 0.490097f, 0.490358f, 0.490613f, 0.490863f, 0.491106f, 0.491344f, 0.491576f,
            0.491802f, 0.492024f, 0.492240f, 0.492451f, 0.492656f, 0.492857f, 0.493053f, 0.493244f, 0.493431f, 0.493613f,
            0.493790f, 0.493963f, 0.494132f, 0.494297f, 0.494457f, 0.494614f, 0.494766f, 0.494915f, 0.495060f, 0.495201f,
            0.495339f, 0.495473f, 0.495603f, 0.495731f, 0.495855f, 0.495975f, 0.496093f, 0.496207f, 0.496319f, 0.496427f,
            0.496533f, 0.496636f, 0.496736f, 0.496833f, 0.496928f, 0.497020f, 0.497110f, 0.497197f, 0.497282f, 0.497365f,
            0.497445f, 0.497523f, 0.497599f, 0.497673f, 0.497744f, 0.497814f, 0.497882f, 0.497948f, 0.498012f, 0.498074f,
            0.498134f, 0.498193f, 0.498250f, 0.498305f, 0.498359f, 0.498411f, 0.498462f, 0.498511f, 0.498559f, 0.498605f,
            0.498650f, 0.498694f, 0.498736f, 0.498777f, 0.498817f, 0.498856f, 0.498893f, 0.498930f, 0.498965f, 0.498999f
    };
    private static final int SIZE = TABLE.length;
    private static final int COLUMN_SIZE = 10;

    private TableNormal() {}

    static float zValue(float value) {

        for (int i = 0; i < SIZE; i++) {

            if (TABLE[i] >= value) return valueOfIndex(value, i);
        }
        return -1f;
    }

    static float lastValue() {
        return TABLE[SIZE - 1];
    }

    private static float valueOfIndex(float value, int i) {
        if (TABLE[i] == value) return valueOfIndex(row(i), col(i));
        else {

            int x = i - 1;
            float difMax = (TABLE[i] - value);
            float difMin = (value - TABLE[x]);

            return (difMin < difMax) ? valueOfIndex(row(x), col(x))
                    : (difMax < difMin) ? valueOfIndex(row(i), col(i))
                    : valueOfIndex(row((x + i) / 2), col((x + i) / 2));
        }
    }

    private static float valueOfIndex(int i, int j) {
        return ((i * COLUMN_SIZE) + j) / 100f;
    }

    private static int row(int index) {
        return index / COLUMN_SIZE;
    }

    private static int col(int index) {
        return index - (row(index) * COLUMN_SIZE);
    }
}
